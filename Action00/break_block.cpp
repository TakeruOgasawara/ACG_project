//===========================================================================================
//
// [edit.cpp]
// Author : Takeru Ogasawara
//
//===========================================================================================
#include <stdio.h>
#include "break_block.h"
#include "manager.h"
#include "renderer.h"
#include "input.h"
#include "objectX.h"
#include "debugproc.h"

#include "texture.h"
#include "xfile.h"

//===========================================================================================
// コンストラクタ
//===========================================================================================
CBreakBlock::CBreakBlock()
{
	for (int nCnt = 0; nCnt < TYPE_MAX; nCnt++)
	{
		m_pObjectX[nCnt] = nullptr;
	}
	m_pos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_rot = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_nDestroyTime = 0;
}

//===========================================================================================
// デストラクタ
//===========================================================================================
CBreakBlock::~CBreakBlock()
{

}

//===========================================================================================
// 生成
//===========================================================================================
CBreakBlock* CBreakBlock::Create(D3DXVECTOR3 pos)
{
	CBreakBlock* pEdit = nullptr;

	if (pEdit == nullptr)
	{
		pEdit = new CBreakBlock;

		pEdit->Init(pos);
		pEdit->SetPosition(pos);

		return pEdit;
	}

	return nullptr;
}

//===========================================================================================
// 初期化処理
//===========================================================================================
HRESULT CBreakBlock::Init(void)
{
	return S_OK;
}

//===========================================================================================
// 初期化処理
//===========================================================================================
HRESULT CBreakBlock::Init(D3DXVECTOR3 pos)
{
	//m_pObjectX[TYPE_BLOCK] = CObjectX::Init("data\\MODEL\\object\\squareMin.x", pos);

	return S_OK;
}

//===========================================================================================
// 終了処理
//===========================================================================================
void CBreakBlock::Uninit(void)
{
	/*if (m_pObjectX != nullptr)
	{
		delete m_pObjectX;
		m_pObjectX = nullptr;
	}*/
}

//===========================================================================================
// 更新処理
//===========================================================================================
void CBreakBlock::Update(void)
{
	
}

//===========================================================================================
// 描画処理
//===========================================================================================
void CBreakBlock::Draw(void)
{
	
}